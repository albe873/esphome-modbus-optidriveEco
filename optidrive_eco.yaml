esphome:
  name: optidrive_eco
  friendly_name: optidrive_eco

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0
#  level: NONE

# Enable Home Assistant API
api:
  encryption:
    key: !secret ha_api

ota:
  - platform: esphome
    password: !secret esphome_ota

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  #power_save_mode: HIGH

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "optidrive_eco Fallback Hotspot"
    password: !secret fb_hotspot
captive_portal:

# Deep sleep
#deep_sleep:
#  id: deep_sleep_control

#time:
#  - platform: homeassistant
#    id: esptime
#    on_time:
      #Deep sleep at 21:00 and wake up at 07:00.
#      - hours: 21
#        then:
#          - delay: 1s
          #Rest up
#          - deep_sleep.enter:
#              id: deep_sleep_control
#              until: "07:00:00"
#              time_id: esptime

uart:
  id: uart_modbus
  tx_pin: GPIO2
  rx_pin: GPIO3
  # default value, if changed on the inverter, needs to be changed also here
  baud_rate: 115200
  stop_bits: 1
  parity: none


modbus:
  flow_control_pin: GPIO4
  id: modbus1
  uart_id: uart_modbus
  send_wait_time: 250ms



modbus_controller:
  - id: modbuscontr1
    # default value, if changed on the inverter, needs to be changed also here
    address: 0x01
    modbus_id: modbus1
    update_interval: 2s


binary_sensor:
  # r Status
  # upper byte -> error code, lower byte -> drive status
  # bit 0 - 0 drive disabled,   1 drive enabled
  # bit 1 - 0 drive healty,     1 drive tripped
  # bit 2 - 0 auto              1 hand
  # bit 3 - inhibit
  # bit 4 - service due
  # bit 5 - standby
  # bit 6 - drive ready
  # bit 7 - 0 normal condition  1 low or high load condition detected

  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "drive enable"
    id: statusdrive
    register_type: read
    address: 5
    bitmask: 0x1

  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "drive tripped"
    id: statustripped
    register_type: read
    address: 5
    bitmask: 0x2
  
  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "hand"
    id: statushand
    register_type: read
    address: 5
    bitmask: 0x4
  
  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "standby"
    id: statusstandby
    register_type: read
    address: 5
    bitmask: 0x20
  
  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "drive ready"
    id: statusdriveready
    register_type: read
    address: 5
    bitmask: 0x40

  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "abnormal load"
    id: statusabnload
    register_type: read
    address: 5
    bitmask: 0x80



switch:
  # control drive enable with mosfet board closing/opening the contact between 1-2
  - platform: gpio
    id: drive_status
    pin:
      number: GPIO7
      inverted: true
    name: "Drive Status"



sensor:
  #- platform: internal_temperature
  #  name: "Internal Temperature"
  
  # r/w Command Speed Reference
  # sent in Hz with one decimal place (500 = 50.0 Hz)

  #- platform: modbus_controller
  #  modbus_controller_id: modbuscontr1
  #  name: "command speed reference"
  #  id: csr
  #  register_type: holding
  #  address: 1
  #  value_type: U_WORD
  #  filters:
  #    - multiply: 0.1
  
  # r/w Command Ramp times
  # acc and dec ramp times when fieldbus ramp control is selected
  # input in range from 0 to 60000 with two decimal points (0.00s to 600.00s)
  #- platform: modbus_controller
  #  modbus_controller_id: modbuscontr1
  #  name: "command ramp times"
  #  id: crt
  #  register_type: holding
  #  address: 3
  #  value_type: U_WORD
  
  # r Output Frequency
  # output frequency of the drive, with one decimal place (123 = 12,3 Hz)
  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "output frequency"
    accuracy_decimals: 1
    device_class: frequency
    state_class: measurement
    unit_of_measurement: Hz
    id: outputfreq
    register_type: read
    address: 6
    value_type: U_WORD
    register_count: 4
    filters:
      - multiply: 0.1

  # r Output Current
  # output current of the drive, with one decimal place (123 = 12,3 A)
  #- platform: modbus_controller
  #  modbus_controller_id: modbuscontr1
  #  name: "output current"
  #  accuracy_decimals: 1
  #  device_class: current
  #  unit_of_measurement: A
  #  id: outputcurr
  #  register_type: read
  #  address: 7
  #  value_type: U_WORD
  #  filters:
  #    - multiply: 0.1

  # r Output Torque
  # motor output torque level, with one decimal place (474 = 47,4 %)
  #- platform: modbus_controller
  #  modbus_controller_id: modbuscontr1
  #  name: "output torque"
  #  accuracy_decimals: 1
  #  unit_of_measurement: "%"
  #  id: outputtorq
  #  register_type: read
  #  address: 8
  #  value_type: U_WORD
  #  filters:
  #    - multiply: 0.1

  # r Output Power
  # output power of the drive, with two decimal place (1100 = 11,00 kW)
  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "output power"
    accuracy_decimals: 2
    device_class: power
    state_class: measurement
    unit_of_measurement: kW
    id: outputpower
    register_type: read
    address: 9
    value_type: U_WORD
    filters:
      - multiply: 0.01

  # r Analog 1 level
  # Analog Input 1 applied signal level in % with one decimal place (1000 = 100,0%)
  #- platform: modbus_controller
  #  modbus_controller_id: modbuscontr1
  #  name: "Analog 1"
  #  accuracy_decimals: 1
  #  unit_of_measurement: "%"
  #  id: analog1
  #  register_type: read
  #  address: 19
  #  value_type: U_WORD
  #  filters:
  #    - multiply: 0.1

  # Analog 1 level as pressure sensor
  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "Pressure"
    accuracy_decimals: 1
    device_class: pressure
    state_class: measurement
    unit_of_measurement: "bar"
    id: pressure
    register_type: read
    address: 19
    value_type: U_WORD
    register_count: 5 # to read multiple coil in one command with empty register between
    filters:
      - multiply: 0.016
  
  # r Drive Temperature
  # measured heatsink temperature in celsius
  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "drive temperature"
    accuracy_decimals: 0
    device_class: temperature
    state_class: measurement
    unit_of_measurement: "Â°C"
    id: drivetemp
    register_type: read
    address: 23
    value_type: U_WORD

  # r kWh Meter
  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "kWh meter"
    accuracy_decimals: 0
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: kWh
    id: kwhmet
    register_type: read
    address: 31
    value_type: U_WORD
    skip_updates: 1800
    register_count: 3

  # r Running Time - Hours
  # total running time (hours)
  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    name: "running time hours"
    accuracy_decimals: 0
    device_class: duration
    state_class: total_increasing
    unit_of_measurement: h
    id: rth
    register_type: read
    address: 33
    value_type: U_WORD
    skip_updates: 1800

  # r Running Time - Min & Sec
  # total running time (Min & Sec)
  #- platform: modbus_controller
  #  modbus_controller_id: modbuscontr1
  #  name: "running time min, sec"
  #  id: rtms
  #  register_type: read
  #  address: 34
  #  value_type: U_WORD

number:
  # parameter 1-15: pressure SETPOINT 1
  - platform: modbus_controller
    modbus_controller_id: modbuscontr1
    id: press1
    name: "pressure SETPOINT 1"
    address: 114
    value_type: U_WORD
    step: 0.2
    min_value: 0
    max_value: 2.6
    multiply: 10
    skip_updates: 5
